Ext.data.JsonP.flexbox({"guide":"<!---\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/flexbox-section-flexible-boxes-concept'>Flexible boxes concept</a>\n </li>\n<li>2. <a href='#!/guide/flexbox-section-flexible-boxes-vocabulary'>Flexible boxes vocabulary</a>\n <ul>\n<li>2.1. <a href='#!/guide/flexbox-section-flex-container'>Flex container</a>\n </li>\n<li>2.2. <a href='#!/guide/flexbox-section-axes'>Axes</a>\n </li>\n<li>2.3. <a href='#!/guide/flexbox-section-directions'>Directions</a>\n </li>\n<li>2.4. <a href='#!/guide/flexbox-section-dimensions'>Dimensions</a>\n </li>\n</ul></li>\n<li>3. <a href='#!/guide/flexbox-section-supported-attributes'>Supported attributes</a>\n </li>\n<li>4. <a href='#!/guide/flexbox-section-the-flexdirection-attribute'>The flexdirection attribute</a>\n </li>\n</ul></div>\n   Copyright 2015-2016 Teem. Licensed under the Apache License, Version 2.0 (the \"License\"); #\n   You may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n   Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n   either express or implied. See the License for the specific language governing permissions and limitations under the License.\n\n   This guide is based on the guide \"Using CSS flexible boxes\" by Mozilla Developer Network\n   https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes\n-->\n\n\n<h1 id='flexbox-section-css3-flexible-box-or-flexbox-guide'>CSS3 Flexible Box or flexbox Guide</h1>\n\n<p>The <a href=\"https://www.w3.org/TR/css3-flexbox/\">CSS3 Flexible Box</a>, or <em>flexbox</em>, is a layout mode providing for the arrangement of elements (children of a container element) such that the elements behave predictably when the UI layout must accommodate different screen sizes and different display devices. CSS3 Flexible Box is a W3C standard (working draft). For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container's margins collapse with the margins of its contents.</p>\n\n<p>Many designers will find the <em>flexbox</em> model easier to use than the traditional CSS box model. Child elements in a <em>flexbox</em> can be laid out in any direction and can have flexible dimensions to adapt to the display space. Positioning child elements is thus much easier, and complex layouts can be achieved more simply and with cleaner code, as the display order of the elements is independent of their order in the source code. This independence intentionally affects only the visual rendering, leaving speech order and navigation based on the source order.</p>\n\n<h2 id='flexbox-section-flexible-boxes-concept'>Flexible boxes concept</h2>\n\n<p>The defining aspect of the flex layout is the ability to alter its items' width and/or height to best fill the available space on any display device. A flex container expands items to fill available free space, or shrinks them to prevent overflow.</p>\n\n<p>The <em>flexbox</em> layout algorithm is direction-agnostic as opposed to the block layout, which is vertically-biased, or the inline layout, which is horizontally-biased. While the block layout works well for pages, it lacks sufficient definition to support application components that have to change orientation, resize, stretch, or shrink as the user agent changes, flips from vertical to horizontal, and so forth.</p>\n\n<h2 id='flexbox-section-flexible-boxes-vocabulary'>Flexible boxes vocabulary</h2>\n\n<p>While a discussion of flexible boxes is liberated from terms like horizontal/inline axis and vertical/block axis, it requires a new terminology to properly describe the model. Consider the following diagram when reviewing the vocabulary items below. It shows a flex container that has a flex-direction of row, meaning that the flex items follow each other horizontally across the main axis according to the established writing mode, the direction in which the element's text flows, in this case left-to-right.</p>\n\n<p><img src=\"../images/flexbox-diagram.png\" width=\"500\" height=\"341\"></p>\n\n<h3 id='flexbox-section-flex-container'>Flex container</h3>\n\n<p>The parent element in which flex items are contained. A flex container is defined using the flex or inline-flex values of the display property.\nFlex item\nEach child of a flex container becomes a flex item. Text directly contained in a flex container is wrapped in an anonymous flex item.</p>\n\n<h3 id='flexbox-section-axes'>Axes</h3>\n\n<p>Every flexible box layout follows two axes. The main axis is the axis along which the flex items follow each other. The cross axis is the axis perpendicular to the main axis.</p>\n\n<ul>\n<li>The <strong>flexdirection</strong> property establishes the main axis.</li>\n<li>The <strong>justifycontent</strong> property defines how flex items are laid out along the main axis on the current line.</li>\n<li>The <strong>alignitems</strong> property defines the default for how flex items are laid out along the cross axis on the current line.</li>\n<li>The <strong>alignself</strong> property defines how a single flex item is aligned on the cross axis, and overrides the default established by align-items.</li>\n</ul>\n\n\n<h3 id='flexbox-section-directions'>Directions</h3>\n\n<p>The <strong>main start/main</strong> end and <strong>cross start/cross</strong> end sides of the flex container describe the origin and terminus of the flow of flex items. They follow the main axis and cross axis of the flex container in the vector established by the writing-mode (left-to-right, right-to-left, etc.).</p>\n\n<p>Flex items can be laid out on either a single line or on several lines according to the flex-wrap property, which controls the direction of the cross axis and the direction in which new lines are stacked.</p>\n\n<h3 id='flexbox-section-dimensions'>Dimensions</h3>\n\n<p>The flex items' agnostic equivalents of height and width are main size and cross size, which respectively follow the main axis and cross axis of the flex container.</p>\n\n<p>The minheight and minwidth properties initial value is 0.</p>\n\n<h1 id='flexbox-section-dreemgl%27s-flexbox-implementation'>DreemGL's flexbox implementation</h1>\n\n<p>The DreemGL implementation of <em>flexbox</em> is based on <a href=\"https://github.com/facebook/css-layout\">Facebook's open source css-layout library</a>.</p>\n\n<p>While DreemGL uses the Facebook css-layout JavaScript library, the attribute names use a slightly different naming scheme. In Facebook's <em>flexbox</em> implementation attribute use camel-case spelling, in DreemGL all attribute name are lower case, e.g. <code>marginleft</code> instead or <code>marginLeft</code>. For the values, the <em>hyphen</em> has been removed, so it's <code>flexstart</code> instead of <code>flex-start</code>.</p>\n\n<h2 id='flexbox-section-supported-attributes'>Supported attributes</h2>\n\n<table style=\"border: 1px solid darkgrey\">\n    <tr>\n      <th style=\"align: left\">Attribute name</th>\n      <th>Type / Value</th>\n    </tr>\n    <tr>\n      <td>w, width, h, height</td>\n      <td>positive number</td>\n    </tr>\n    <tr>\n      <td>minwidth, minheight</td>\n      <td>positive number</td>\n    </tr>\n    <tr>\n      <td>maxwidth, maxheight</td>\n      <td>positive number</td>\n    </tr>\n    <tr>\n      <td>left, right, top, bottom</td>\n      <td>number</td>\n    </tr>\n    <tr>\n      <td>margin</td><td>vec4</td>\n    </tr>\n    <tr>\n      <td>marginleft, marginright, margintop, marginbottom</td>\n      <td>typeless</td>\n    </tr>\n    <tr>\n      <td>paddding</td>\n      <td>vec4 (left, top, right, bottom); can be assigned a single value to set them all at once.</td>\n    </tr>\n    <tr>\n      <td>paddingleft, paddingright, paddingtop, paddingbottom</td><td>positive number</td>\n    </tr>\n    <tr>\n      <td>borderwidth, borderleftwidth, borderrightwidth, bordertopwidth, borderbottomwidth</td>\n      <td>positive number</td>\n    </tr>\n    <tr>\n      <td>flexdirection</td>\n      <td>'column', 'row'</td>\n    </tr>\n    <tr>\n      <td>justifycontent</td>\n      <td>'flex-start', 'center', 'flex-end', 'space-between', 'space-around'</td>\n    </tr>\n    <tr>\n      <td>alignitems, alignself</td>\n      <td>'flex-start', 'center', 'flex-end', 'stretch'</td>\n    </tr>\n    <tr>\n      <td>flex</td>\n      <td>positive number</td>\n    </tr>\n    <tr>\n      <td>flexwrap</td>\n      <td>'wrap', 'nowrap'</td>\n    </tr>\n    <tr>\n      <td>position</td>\n      <td>'relative', 'absolute'</td>\n    </tr>\n</table>\n\n\n\n\n<iframe style=\"width:864px; height:864px\" src=\"/examples/guides/flexbox/flexboxtool\"></iframe>\n\n\n<h2 id='flexbox-section-the-flexdirection-attribute'>The flexdirection attribute</h2>\n\n<p>The default layout applied to a view's children is the <code>flexdirection='column'</code>. In this examples we have two views as direct children of screen, and each of them has 10 childviews.</p>\n\n<iframe style=\"width:600px; height:240px\" src=\"/examples/guides/flexbox/flexbox1\"></iframe>\n\n\n\n\n<iframe style=\"width:850px; height:240px\" src=\"/examples/guides/docsourceviewer#file=flexbox/flexbox1.js\"></iframe>\n\n","title":"Flexbox Layout in Dreem"});
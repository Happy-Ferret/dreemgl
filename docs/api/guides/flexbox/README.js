Ext.data.JsonP.flexbox({"guide":"<h1 id='flexbox-section-css3-flexible-box-or-flexbox'>CSS3 Flexible Box or flexbox</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/flexbox-section-flexible-boxes-concept'>Flexible boxes concept</a>\n </li>\n<li>2. <a href='#!/guide/flexbox-section-flexible-boxes-vocabulary'>Flexible boxes vocabulary</a>\n <ul>\n<li>2.1. <a href='#!/guide/flexbox-section-flex-container'>Flex container</a>\n </li>\n<li>2.2. <a href='#!/guide/flexbox-section-axes'>Axes</a>\n </li>\n<li>2.3. <a href='#!/guide/flexbox-section-directions'>Directions</a>\n </li>\n<li>2.4. <a href='#!/guide/flexbox-section-dimensions'>Dimensions</a>\n </li>\n</ul></li>\n<li>3. <a href='#!/guide/flexbox-section-supported-attributes'>Supported attributes</a>\n </li>\n<li>4. <a href='#!/guide/flexbox-section-the-flexbool-tool'>The Flexbool tool</a>\n </li>\n<li>5. <a href='#!/guide/flexbox-section-container-attributes'>Container attributes</a>\n <ul>\n<li>5.1. <a href='#!/guide/flexbox-section-the-flexdirection-attribute'>The flexdirection attribute</a>\n </li>\n<li>5.2. <a href='#!/guide/flexbox-section-the-flexwrap-attribute'>The flexwrap attribute</a>\n </li>\n<li>5.3. <a href='#!/guide/flexbox-section-the-justifycontent-attribute'>The justifycontent attribute</a>\n </li>\n<li>5.4. <a href='#!/guide/flexbox-section-the-alignitems-attribute'>The alignitems attribute</a>\n </li>\n<li>5.5. <a href='#!/guide/flexbox-section-centering-using-flexbox'>Centering using flexbox</a>\n </li>\n</ul></li>\n<li>6. <a href='#!/guide/flexbox-section-child-attributes'>Child attributes</a>\n <ul>\n<li>6.1. <a href='#!/guide/flexbox-section-the-alignself-attribute'>The alignself attribute</a>\n </li>\n<li>6.2. <a href='#!/guide/flexbox-section-the-flex-attribute'>The flex attribute</a>\n </li>\n</ul></li>\n</ul></div>\n\n<p>The <a href=\"https://www.w3.org/TR/css3-flexbox/\">CSS3 Flexible Box</a>, or <em>flexbox</em>, is a layout mode providing for the arrangement of elements (children of a container element) such that the elements behave predictably when the UI layout must accommodate different screen sizes and different display devices. CSS3 Flexible Box is a W3C standard (working draft). For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container's margins collapse with the margins of its contents.</p>\n\n<p>Many designers will find the <em>flexbox</em> model easier to use than the traditional CSS box model. Child elements in a <em>flexbox</em> can be laid out in any direction and can have flexible dimensions to adapt to the display space. Positioning child elements is thus much easier, and complex layouts can be achieved more simply and with cleaner code, as the display order of the elements is independent of their order in the source code. This independence intentionally affects only the visual rendering, leaving speech order and navigation based on the source order.</p>\n\n<h2 id='flexbox-section-flexible-boxes-concept'>Flexible boxes concept</h2>\n\n<p>The defining aspect of the flex layout is the ability to alter its items' width and/or height to best fill the available space on any display device. A flex container expands items to fill available free space, or shrinks them to prevent overflow.</p>\n\n<p>The <em>flexbox</em> layout algorithm is direction-agnostic as opposed to the block layout, which is vertically-biased, or the inline layout, which is horizontally-biased. While the block layout works well for pages, it lacks sufficient definition to support application components that have to change orientation, resize, stretch, or shrink as the user agent changes, flips from vertical to horizontal, and so forth.</p>\n\n<h2 id='flexbox-section-flexible-boxes-vocabulary'>Flexible boxes vocabulary</h2>\n\n<p>While a discussion of flexible boxes is liberated from terms like horizontal/inline axis and vertical/block axis, it requires a new terminology to properly describe the model. Consider the following diagram when reviewing the vocabulary items below. It shows a flex container that has a flexdirection of row, meaning that the flex items follow each other horizontally across the main axis according to the established writing mode, the direction in which the element's text flows, in this case left-to-right.</p>\n\n<p><img src=\"https://raw.githubusercontent.com/dreemproject/dreemgl/master/docs/images/flexbox-diagram.png\" width=\"750\" height=\"511\"></p>\n\n<h3 id='flexbox-section-flex-container'>Flex container</h3>\n\n<p>The parent element in which flex items are contained. A flex container is defined using the flex or inline-flex values of the display attribute.\nFlex item\nEach child of a flex container becomes a flex item. Text directly contained in a flex container is wrapped in an anonymous flex item.</p>\n\n<h3 id='flexbox-section-axes'>Axes</h3>\n\n<p>Every flexible box layout follows two axes. The main axis is the axis along which the flex items follow each other. The cross axis is the axis perpendicular to the main axis.</p>\n\n<ul>\n<li>The <strong>flexdirection</strong> attribute establishes the main axis.</li>\n<li>The <strong>justifycontent</strong> attribute defines how flex items are laid out along the main axis on the current line.</li>\n<li>The <strong>alignitems</strong> attribute defines the default for how flex items are laid out along the cross axis on the current line.</li>\n<li>The <strong>alignself</strong> attribute defines how a single flex item is aligned on the cross axis, and overrides the default established by alignitems.</li>\n</ul>\n\n\n<h3 id='flexbox-section-directions'>Directions</h3>\n\n<p>The <strong>main start/main</strong> end and <strong>cross start/cross</strong> end sides of the flex container describe the origin and terminus of the flow of flex items. They follow the main axis and cross axis of the flex container in the vector established by the writing-mode (left-to-right, right-to-left, etc.).</p>\n\n<p>Flex items can be laid out on either a single line or on several lines according to the flexwrap attribute, which controls the direction of the cross axis and the direction in which new lines are stacked.</p>\n\n<h3 id='flexbox-section-dimensions'>Dimensions</h3>\n\n<p>The flex items' agnostic equivalents of height and width are main size and cross size, which respectively follow the main axis and cross axis of the flex container.</p>\n\n<h1 id='flexbox-section-dreemgl%27s-flexbox-implementation'>DreemGL's flexbox implementation</h1>\n\n<p>The DreemGL implementation of <em>flexbox</em> is based on <a href=\"https://github.com/facebook/css-layout\">Facebook's open source css-layout library</a>.</p>\n\n<p>While DreemGL uses the Facebook css-layout JavaScript library, the attribute names use a slightly different naming scheme. In Facebook's <em>flexbox</em> implementation attribute use camel-case spelling, in DreemGL all attribute name are lower case, e.g. <code>marginleft</code> instead or <code>marginLeft</code>. For the values, the <em>hyphen</em> has been removed, so it's <code>flexstart</code> instead of <code>flex-start</code>.</p>\n\n<h2 id='flexbox-section-supported-attributes'>Supported attributes</h2>\n\n<table style=\"border: 1px solid darkgrey\">\n    <tr>\n      <th style=\"align: left\">Attribute name</th>\n      <th>Type / Value</th>\n    </tr>\n    <tr>\n      <td>w, width, h, height</td>\n      <td>positive number</td>\n    </tr>\n    <tr>\n      <td>minwidth, minheight</td>\n      <td>positive number</td>\n    </tr>\n    <tr>\n      <td>maxwidth, maxheight</td>\n      <td>positive number</td>\n    </tr>\n    <tr>\n      <td>left, right, top, bottom</td>\n      <td>number</td>\n    </tr>\n    <tr>\n      <td>margin</td><td>vec4</td>\n    </tr>\n    <tr>\n      <td>marginleft, marginright, margintop, marginbottom</td>\n      <td>typeless</td>\n    </tr>\n    <tr>\n      <td>paddding</td>\n      <td>vec4 (left, top, right, bottom); can be assigned a single value to set them all at once.</td>\n    </tr>\n    <tr>\n      <td>paddingleft, paddingright, paddingtop, paddingbottom</td><td>positive number</td>\n    </tr>\n    <tr>\n      <td>borderwidth, borderleftwidth, borderrightwidth, bordertopwidth, borderbottomwidth</td>\n      <td>positive number</td>\n    </tr>\n    <tr>\n      <td>flexdirection</td>\n      <td>'column', 'row'</td>\n    </tr>\n    <tr>\n      <td>justifycontent</td>\n      <td>'flex-start', 'center', 'flex-end', 'space-between', 'space-around'</td>\n    </tr>\n    <tr>\n      <td>alignitems, alignself</td>\n      <td>'flex-start', 'center', 'flex-end', 'stretch'</td>\n    </tr>\n    <tr>\n      <td>flex</td>\n      <td>positive number</td>\n    </tr>\n    <tr>\n      <td>flexwrap</td>\n      <td>'wrap', 'nowrap'</td>\n    </tr>\n    <tr>\n      <td>position</td>\n      <td>'relative', 'absolute'</td>\n    </tr>\n</table>\n\n\n<h2 id='flexbox-section-the-flexbool-tool'>The Flexbool tool</h2>\n\n<p>This DreemGL application lets you play around with the various attributes and values, providing immediate visual feedback. You should open the application in a separate browser tab while going through this guide, and can use it to verify your understanding of flexbox.</p>\n\n<p><a href=\"/docs/examples/flexbox/flexboxtool\" target=\"_blank\">Open flexbox tool in tab</a></p>\n\n<iframe style=\"width:860px; height:864px; border:0\" src=\"/docs/examples/flexbox/flexboxtool\"></iframe>\n\n\n<h2 id='flexbox-section-container-attributes'>Container attributes</h2>\n\n<h3 id='flexbox-section-the-flexdirection-attribute'>The flexdirection attribute</h3>\n\n<p>The <strong>flexdirection</strong> attribute controls how items are laid out in the flex container, by setting the direction of the main axis. The two directions available are horizontal layout using the value <em>row</em>, and vertical layout using the value <strong>column</strong>. The following examples shows two containers with three children, each. The first container uses the default <strong>row</strong> direction for layout, the second container the <strong>column</strong> layout.</p>\n\n<p><a href=\"/docs/examples/flexbox/flexdirection\" target=\"_blank\">/docs/examples/flexbox/flexdirection.js</a></p>\n\n<iframe style=\"width:200px; height:200px; border:0\" src=\"/docs/examples/flexbox/flexdirection\"></iframe>\n\n\n<p><br/></p>\n\n<iframe style=\"width:860px; height:400px; border:0\" src=\"/docs/examples/docsourceviewer#file=flexbox/flexdirection.js\"></iframe>\n\n\n<h3 id='flexbox-section-the-flexwrap-attribute'>The flexwrap attribute</h3>\n\n<p>By default flexbox will arrange all items on a single line, with no wrapping in place. The <strong>flexwrap</strong> attribute controls if the flex container lay out its items in single or multiple lines. The example below shows two containers with 5 boxes. The first container has <strong>flexwrap</strong> set to <strong>nowrap</strong>, the second container has <strong>flexwrap</strong> set to <strong>wrap</strong>, therefore the last item (which does not fit into the container) has been pushed to a new line.</p>\n\n<iframe style=\"width:300px; height:220px; border:0\" src=\"/docs/examples/flexbox/flexwrap\"></iframe>\n\n\n<p><br/></p>\n\n<iframe style=\"width:860px; height:400px; border:0\" src=\"/docs/examples/docsourceviewer#file=flexbox/flexwrap.js\"></iframe>\n\n\n<h3 id='flexbox-section-the-justifycontent-attribute'>The justifycontent attribute</h3>\n\n<p>This defines the alignment along the main axis. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.</p>\n\n<ul>\n<li><strong>flex-start</strong> (default): items are packed toward the start line</li>\n<li><strong>flex-end</strong> items are packed toward to end line</li>\n<li><strong>center</strong> items are centered along the line</li>\n<li><strong>space-between</strong> items are evenly distributed in the line; first item is on the start line, last item on the end line</li>\n<li><strong>space-around</strong> items are evenly distributed in the line with equal space around them. Note that visually the spaces aren't equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.</li>\n</ul>\n\n\n<p><a href=\"/docs/examples/flexbox/justifycontent\" target=\"_blank\">/docs/examples/flexbox/justifycontent.js</a></p>\n\n<iframe style=\"width:320px; height:340px; border:0\" src=\"/docs/examples/flexbox/justifycontent\"></iframe>\n\n\n<p><br/></p>\n\n<iframe style=\"width:860px; height:400px; border:0\" src=\"/docs/examples/docsourceviewer#file=flexbox/justifycontent.js\"></iframe>\n\n\n<h3 id='flexbox-section-the-alignitems-attribute'>The alignitems attribute</h3>\n\n<p>The <strong>alignitems</strong> attribute aligns flex items of the current flex line the same way as justifycontent but in the perpendicular direction. The values <strong>flex-start</strong>, <strong>flex-end</strong>, and <strong>center</strong> should be self-explanatory. <strong>stretch</strong> will stretch the width/height of an item along the cross axis.</p>\n\n<p>Check the following example: The flexdirection of the container is set to <strong>row</strong>, and each of the views has a different height. Depending on the <strong>alignitems</strong> value, the views are arranged accordingly. The last row with the <strong>alignitems</strong> value of <strong>stretch</strong> is a special case: For that row there has been no height set for the red and the orange view, therefore the height is stretched to the maximum value.</p>\n\n<p><a href=\"/docs/examples/flexbox/alignitems\" target=\"_blank\">/docs/examples/flexbox/alignitems.js</a></p>\n\n<iframe style=\"width:320px; height:400px; border:0\" src=\"/docs/examples/flexbox/alignitems\"></iframe>\n\n\n<p><br/></p>\n\n<iframe style=\"width:860px; height:400px; border:0\" src=\"/docs/examples/docsourceviewer#file=flexbox/alignitems.js\"></iframe>\n\n\n<h4 id='flexbox-section-changing-container-size-with-alignitems%3D%27stretch%27'>Changing container size with alignitems='stretch'</h4>\n\n<p>When setting <strong>alignitems</strong> to <strong>stretch</strong>, the item width/height will be adjusted when the container size changes along the cross axis. Check the following example, where no height is set on both the red and the blue view. The cross axis is the y-axis. Clicking anywhere into the container area will grow or shrink the height of the container over a duration of 1 second. As you can see, the red and blue view the will grow and shrink with the container along the cross axis.</p>\n\n<p><a href=\"/docs/examples/flexbox/alignitems_animation\" target=\"_blank\">/docs/examples/flexbox/alignitems_animation.js</a></p>\n\n<iframe style=\"width:385px; height:185px; border:0\" src=\"/docs/examples/flexbox/alignitems_animation\"></iframe>\n\n\n<p><br/></p>\n\n<iframe style=\"width:860px; height:400px; border:0\" src=\"/docs/examples/docsourceviewer#file=flexbox/alignitems_animation.js\"></iframe>\n\n\n<h3 id='flexbox-section-centering-using-flexbox'>Centering using flexbox</h3>\n\n<p>To center content with flexbox inside a container, set the <strong>flexdirection</strong> and the <strong>justifycontent</strong> attributes to <strong>center</strong>.</p>\n\n<p><a href=\"/docs/examples/flexbox/flexcentering1\" target=\"_blank\">/docs/examples/flexbox/flexcentering1</a></p>\n\n<iframe style=\"width:200px; height:200px; border:0\" src=\"/docs/examples/flexbox/flexcentering1\"></iframe>\n\n\n\n\n<iframe style=\"width:656px; height:200px; border:0\" src=\"/docs/examples/docsourceviewer#file=flexbox/flexcentering1.js\"></iframe>\n\n\n<h2 id='flexbox-section-child-attributes'>Child attributes</h2>\n\n<p>Only two attributes can be set on the child directly to influence the layout of that specific item. <strong>flex</strong> and <strong>alignself</strong></p>\n\n<h3 id='flexbox-section-the-alignself-attribute'>The alignself attribute</h3>\n\n<p><strong>alignself</strong> makes it possible to override the align-items value for specific flex items. The align-self attribute accepts the same 5 values as the align-items:</p>\n\n<ul>\n<li><strong>flex-start</strong> cross-start margin edge of the item is placed on the cross-start line</li>\n<li><strong>flex-end</strong> cross-end margin edge of the item is placed on the cross-end line</li>\n<li><strong>center</strong> item is centered in the cross-axis</li>\n<li><strong>stretch</strong> (default) stretch to fill the container (still respect min-width/max-width)</li>\n</ul>\n\n\n<p>Take a look at the following example. The top row of items uses <strong>alignitems='center'</strong> with a <strong>flexdirection='row'</strong> setting. Therefore all views are center along x-axis. For the bottom row, all children override the container alignment along the main axis by using a different <strong>alignself</strong> value.</p>\n\n<p><a href=\"/docs/examples/flexbox/alignself\" target=\"_blank\">/docs/examples/flexbox/alignself.js</a></p>\n\n<iframe style=\"width:320px; height:310px; border:0\" src=\"/docs/examples/flexbox/alignself\"></iframe>\n\n\n\n\n<iframe style=\"width:860px; height:400px; border:0\" src=\"/docs/examples/docsourceviewer#file=flexbox/alignself.js\"></iframe>\n\n\n<h3 id='flexbox-section-the-flex-attribute'>The flex attribute</h3>\n\n<p>The value of the <strong>flex</strong> property specifies the ratio at which it grows relative to its siblings. To fill to the maximum available space, you should use a value of 1. For proportional scaling relative to siblings, you can use any number relative to another child's flex value.</p>\n\n<p>The following example will make things clearer: For all rows, the <strong>flexdirection='row'</strong> and <strong>alignitems='stretch</strong>. Let's go through all rows:</p>\n\n<ul>\n<li>Row #1: Red view has width specified using <strong>flex=.5</strong>, green view uses a value of <strong>flex=1</strong>. The green view is two times as wide as the red view.</li>\n<li>Row #2: The red and orange view have a fixed width <strong>w=80</strong>. The green view uses a <strong>flex=1</strong> value to fill the space.</li>\n<li>Row #3: All four views have a <strong>flex=.25</strong> value, so are all equally wide.</li>\n</ul>\n\n\n<p>Clicking into the container will animate the width (shrinking and growing). You can see that for the middle row the red and orange view maintain a width of 80, only the green view will adapt to the new space available.</p>\n\n<p><a href=\"/docs/examples/flexbox/childflex\" target=\"_blank\">/docs/examples/flexbox/childflex.js</a></p>\n\n<iframe style=\"width:860px; height:200px; border:0\" src=\"/docs/examples/flexbox/childflex\"></iframe>\n\n\n\n\n<iframe style=\"width:860px; height:400px; border:0\" src=\"/docs/examples/docsourceviewer#file=flexbox/childflex.js\"></iframe>\n\n","title":"Flexbox Layout in Dreem"});
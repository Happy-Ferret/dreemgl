{
  "name": "DreemGL",
  "tagline": "DreemGL is an open-source multi-screen prototyping framework for mediated environments, with a visual editor and shader styling for webGL and DALi runtimes written in JavaScript, produced by Teeming Society with Samsung Electronics. http://teem.nu | http://samsung.com",
  "body": "### A PROTOTYPING TOOLKIT FOR GPU-ACCELERATED MULTISCREEN DEVELOPMENT \r\nMore and more product opportunities and design problems involve prototyping applications that connect large screens in the environment to handheld devices or tablets.  At the same time, UI on these screens is evolving to take advantage of faster GPU capabilities.  Dreem is built to enable teams of designers and developers to collaborate on real, functional prototypes that explore both the power of accelerated graphical UIs and multiscreen user experiences.\r\n\r\n\r\n### IOT INTEGRATION FOR SMART ENVIRONMENTS\r\nDREEM allows developers and designers to create ‘compositions’, applications running across many screens and devices in the environment.  Compositions can include networks of users’ personal devices, handheld devices connected to the room, like remotes, and environmental sensors and actuators, like lighting systems.  Input can come from a range of services in the connected space, like depth cameras and physical controllers.\r\n\r\n### CREATE LAYOUTS AND COMPOSITIONS VISUALLY, USING REAL DATA FROM NETWORK SERVICES\r\nFor designers, the development environment includes tools to layout screens visually and preview them in live GL contexts.  Prototype developers and users can connect data services to experiences running on big screens, extend controls to multiple handhelds, and utilize IoT devices all from a visual composition editor.\r\n\r\n\r\n### MULTIPLE USERS, MULTIPLE ROLES, IN MANY SPACES\r\nPrototypes built in DREEM are meant to allow designers to easily test compositions that connect multiple users in shared experiences on big screens or projections, while allowing each person to use the control tools and preferences they have configured.  Compositions can include many roles that user dynamically choose as they join the shared experience\r\n\r\n\r\n## Using DreemGL\r\n\r\nDreemGL is an open source JS webGL and DALi (Dynamic Animation Library; a cross-platform 3D UI Toolkit) prototyping framework with\r\nshader styling and render functions.\r\n![Architecture Image]\r\n(https://raw.githubusercontent.com/dreemproject/dreemgl/dev/docs/images/architecture.png)\r\n\r\n## Start DreemGL\r\nTo start DreemGL type:\r\n\r\n```node server.js```\r\n\r\nTo view the Intro presentation, click here:\r\n\r\n[http://127.0.0.1:2000/docs/slides/introduction](http://127.0.0.1:2000/docs/slides/introduction)\r\n\r\nTo try livecoding a shader open this:\r\n\r\n[http://127.0.0.1:2000/test/rendertest](http://127.0.0.1:2000/test/rendertest) and open\r\n[./test/rendertest.js](/test/rendertest.js) in your editor and start typing away and saving, reload should\r\nbe live.\r\n\r\nAs the server starts, it also shows other local IP's its listening on (for trying it on your phone)\r\n\r\n## Path symbols\r\n\r\nThe server.js has a set of 'default path symbols' which are referencable using the $symbol syntax in require strings: '$widgets/myfile',\r\nThe default path symbols are:\r\n```\r\n\t'system':'$root/system',\r\n\t'resources':'$root/resources',\r\n\t'examples':'$root/examples',\r\n\t'3d':'$root/classes/3d',\r\n\t'behaviors':'$root/classes/behaviors',\r\n\t'server':'$root/classes/server',\r\n\t'sensors':'$root/classes/sensors',\r\n\t'ui':'$root/classes/ui',\r\n\t'testing':'$root/classes/testing',\r\n\t'widgets':'$root/classes/widgets',\r\n```\r\n\r\nAdding a path is done using the commandline\r\nnode server.js -path mylib:../mydir mylib2:../mydir2\r\n\r\n## Classes\r\nclasses are defined in a single file, using the following syntax:\r\n```\r\ndefine.class('$ui/view', function(require, exports, $ui$, label){\r\n\tvar mylib = require('./mylib')\r\n\r\n\tthis.method = function(){\r\n\t}\r\n\r\n\texports.staticmethod = function(){\r\n\t}\r\n})\r\n```\r\n\r\nPlease note the 'require' syntax to specify the baseclass, and the $ui$ to switch directory in the dependency-class list.\r\nOther syntax: $$ - current directory, relative$dir$\r\n\r\nThe prototype of the class is the 'this' of the function.\r\nNote the 2 specially named arguments 'require' and 'exports' where they appear\r\ndoesnt matter, the name does.\r\nexports is the class constructor function, which can hold the static methods.\r\nrequire is simply the local instance of require if needed for normal requires.\r\n\r\nAfter the baseclass and dependencies, you can define attributes on a dreemclass.\r\n\r\n## Attributes\r\n\r\nAttributes are properties that can be wired to other properties, and have a type.\r\n\r\nThe way to create them in a class is to assign an object to this.attributes. The setter of 'attributes' will handle creating all the attributes on the class for you. Types of attributes are automatically inferred if assigned with a plain value, but can also be configured using a Config({meta:'hello'}) object. Assigning a Config object to any existing attribute also refines its settings.\r\nOptions for the config attribute are:\r\n```\r\n\ttype:vec2,float,String\r\n\tvalue:0.4,vec2(3),\"hello\"\r\n\tmeta:'metadataforeditor'\r\n\tpersist:true // make sure the attribute survives a livereload / rerender\r\n```\r\n```\r\nthis.attributes = {\r\n\tpropfloat: 1.0,\r\n\tpropstring: \"HELLO\",\r\n\tpropcustom: Config({type:vec2})\r\n}\r\n```\r\nAttributes are also automatically created if you pass them to the constructor function. view({myprop:10}) automatically creates the myprop attribute\r\n\r\n## Events and attributes\r\n\r\nAttributes allow listeners, and this forms the core eventhandling system.\r\nWhen a value of an attribute changes, using a simple assignment:\r\n```\r\nthis.attr = 10\r\n````\r\nThis will fire all the listeners to this attribute. Adding listeners to attributes is advised to use the onattr (on prefix) syntax\r\n```\r\nthis.onattr = function(event){\r\n\t// event object contains value, old, type, etc\r\n}\r\n```\r\nAttribute listeners are called parent-on-up in the prototype hierarchy,\r\nand each prototypelevel only has one 'onattr' slot, since this is a normal property.\r\nEmitting an event on an attribute can be done by assigning to it, but also using the emit syntax. This object goes to all the listeners as an argument\r\n```\r\nthis.emit('attr',{type:'myown'})\r\n```\r\nIt is also possible to mark values going into a setter using the Mark wrapper.\r\n```\r\nthis.attr = Mark(15, true) // or plainly Mark(15)\r\n```\r\nThis 'mark' is passed into the event object to all the listener as the mark property. Using this it is possible to break infinite feedback loops like so\r\n```\r\nthis.onattr = function(event){\r\n\tif(event.mark) return // someone did an attribute assign using the Mark\r\n}\r\n```\r\n\r\nIt is also possible to use addListener, this adds a list of listeners which are not the same as the onattr (on prefix) slots on the prototype chain. However\r\nthis is exceedingly rare\r\n```\r\nthis.addListener('attr', function(event){\r\n\r\n})\r\n```\r\n\r\n## Styles\r\n\r\nStyles are supported using the 'style' property that can live on 4 levels:\r\n- composition\r\n- screen\r\n- class\r\n- nestedclass\r\n\r\nThese levels are also inherited in that order.\r\nStyles allow subclassing of classes used in the render function of the class on which the properties are set. The subclassing is done using a matching syntax\r\nThere are no limitations what you can put in a style since its an actual subclass.\r\n\r\nThe following style match patterns are supported\r\n```\r\nthis.style = {\r\n\t$:{ // match all\r\n\t}\r\n\t$_myclass:{ // match all with class:'myclass'\r\n\t},\r\n\tlabel:{ // match all labels\r\n\t}\r\n\tlabel_name:{ // match all labels with name:'name'\r\n\t},\r\n\tlabel_class:{ // match all labels with class:'class'\r\n\t}\r\n}\r\n```\r\n\r\n\r\nHave fun!\r\n\r\n## License\r\nThis software is licensed under the  Apache License, Version 2.0. You will find the terms in the file named\r\n[\"LICENSE.md\"](LICENSE.md) in this directory.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}